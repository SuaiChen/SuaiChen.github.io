<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://suaichen.github.io/</id><title>Shuaichen Zone</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-03-05T20:46:44+08:00</updated> <author> <name>Shuaichen Zhou</name> <uri>https://suaichen.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://suaichen.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://suaichen.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Shuaichen Zhou </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>XGBT常见问题整理</title><link href="https://suaichen.github.io/posts/XGBT%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/" rel="alternate" type="text/html" title="XGBT常见问题整理" /><published>2021-03-03T00:00:00+08:00</published> <updated>2021-03-03T00:00:00+08:00</updated> <id>https://suaichen.github.io/posts/XGBT%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</id> <content src="https://suaichen.github.io/posts/XGBT%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/" /> <author> <name>Shuaichen Zhou</name> </author> <summary> 一、缺省值如何处理 ​ xgboost处理缺失值的方法和其他树模型不同。根据作者TianqiChen在论文中章节3.4的介绍，xgboost把缺失值当做稀疏矩阵来对待，本身的在节点分裂时不考虑的缺失值的数值。缺失值数据会被分到左子树和右子树分别计算损失，选择较优的那一个。如果训练中没有数据缺失，预测时出现了数据缺失，那么默认被分类到右子树。 </summary> </entry> <entry><title>SQL常见问题整理</title><link href="https://suaichen.github.io/posts/sql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="SQL常见问题整理" /><published>2021-03-02T00:00:00+08:00</published> <updated>2021-03-02T00:00:00+08:00</updated> <id>https://suaichen.github.io/posts/sql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id> <content src="https://suaichen.github.io/posts/sql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/" /> <author> <name>Shuaichen Zhou</name> </author> <summary> 一、数据倾斜 定义：我们在计算数据的时候，数据的分散度不够，导致大量的数据集中到了一台或者几台机器上计算，这些数据的计算速度远远低于平均计算速度，导致整个计算过程过慢。 常见场景： (1)为什用distinct时reduce阶段会卡在99%一直运行不出结果，但用group by会解决这个问题？ 因为他们的运行机制是不同的，如图所示： group by在map和reduce两个阶段都进行了聚合，但distinct只在reduce阶段进行了聚合，因此很容易在某些reducer产生数据倾斜。 (2) </summary> </entry> </feed>
